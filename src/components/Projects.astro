---
import GitHubIcon from "../icons/GitHub.astro";
import NextJSIcon from "../icons/NextJS.astro";
import TailwindIcon from "../icons/Tailwind.astro";
import Link from "../icons/Link.astro";
import LinkButton from "./LinkButton.astro";
import ReactIcon from "../icons/React.astro";
import AngularIcon from "../icons/Angular.astro";
import NodeIcon from "../icons/Node.astro";
import MongoIcon from "../icons/Mongo.astro";
import FirebaseIcon from "../icons/Firebase.astro";
import NpmIcon from "../icons/Npm.astro";
import ViteIcon from "../icons/Vite.astro";
import JsIcon from "../icons/Js.astro";
import TsIcon from "../icons/Ts.astro";
import MicroIcon from "../icons/MicroPlatform.astro";
import LocalStorage from "../icons/LocalStorage.astro";
import Ionic from "../icons/Ionic.astro";
import Swift from "../icons/Swift.astro";
import iOS from "../icons/iOS.astro";
import Kotlin from "../icons/Kotlin.astro";
import Android from "../icons/Android.astro";

const TAGS = {
  NEXT: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJSIcon,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: TailwindIcon,
  },
  REACT: {
    name: "React",
    class: "bg-[#003f66] text-white",
    icon: ReactIcon,
  },
  ANGULAR: {
    name: "Angular",
    class: "bg-[#522f52] text-white",
    icon: AngularIcon,
  },
  NODE: {
    name: "NodeJS",
    class: "bg-[#3a4d38] text-white",
    icon: NodeIcon,
  },
  MONGODB: {
    name: "MongoDB",
    class: "bg-[#00bd51] text-black",
    icon: MongoIcon,
  },
  FIREBASE: {
    name: "Firebase",
    class: "bg-[#c96a2b] text-white",
    icon: FirebaseIcon,
  },
  NPM: {
    name: "npm",
    class: "bg-[#930032] text-white",
    icon: NpmIcon,
  },
  VITE: {
    name: "Vite",
    class: "bg-[#e8ffff] text-black",
    icon: ViteIcon,
  },
  JS: {
    name: "JavaScript",
    class: "bg-[#efca6a] text-black",
    icon: JsIcon,
  },
  TS: {
    name: "TypeScript",
    class: "bg-[#0049ae] text-white",
    icon: TsIcon,
  },
  MICRO_PLATFORM: {
    name: "Microsoft Platform",
    class: "bg-[#ab0768] text-white",
    icon: MicroIcon,
  },
  LOCAL_STORAGE: {
    name: "Local",
    class: "bg-[#ab0768] text-white",
    icon: LocalStorage,
  },
  IONIC: {
    name: "Ionic",
    class: "bg-[#05d9cd] text-black",
    icon: Ionic,
  },
  SWIFT: {
    name: "Swift",
    class: "bg-[#e63d19] text-white",
    icon: Swift,
  },
  iOS: {
    name: "iOS",
    class: "bg-[#000000] text-white",
    icon: iOS,
  },
  KOTLIN: {
    name: "Kotlin",
    class: "bg-[#6c0f4e] text-white",
    icon: Kotlin,
  },
  ANDROID: {
    name: "Android",
    class: "bg-[#05a22f] text-white",
    icon: Android,
  },
};

const PROJECTS = [
  {
    title: "COILApp - iOS",
    description:
      "Trabajo final de máster. Aplicación móvil nativa con SwiftUI para iOS/iPadOS destinada a optimizar la gestión de participación en proyectos COIL. Permite a los alumnos registrar sus datos de forma autónoma y proporciona a la UPSA un sistema centralizado para administrar, consultar y certificar estas experiencias colaborativas de manera más segura, reduciendo la carga administrativa sobre los docentes. Actualmente, la aplicación está en fase de producción a nivel interno de la universidad.",
    github: "https://github.com/CarlosCG2000/coilAppiOS",
    image: "projects/19_coilapp_ios.png",
    link: "", // Añadir enlace a la Google Play
    tags: [TAGS.iOS, TAGS.SWIFT, TAGS.FIREBASE, TAGS.MONGODB, TAGS.NODE], // Añadir más Tags
    alt: "Captura de una de las pantalla de la aplicación de Android de los Simpsons",
  },
  {
    title: "App de Los Simpsons - Android",
    description:
      "Desarrollada en Kotlin con JeckPack Compose, basada en la arquitectura MVVM siguiendo los principios de Clean Architecture. Realiza llamadas tanto a mocks de datos en JSON como a APIs a través de Retrofit. Uso de inyección de dependencias automatizadas con Hilt e implementación de persistencia de datos local con DataStore y ROOM. Uso de Coroutines y Flows. Ofrece soporte multilingüe mediante el archivo Localizable, con versiones en inglés (predeterminado), español y francés y un diseño personalizado en Theme. Contiene una fuentes de datos desacopladas usando variantes de gradle combinando Build Types y Flavors. Por último cuenta con una estrategia de testing y líneas logs, incluyendo: tests unitarios y Snapshot.",
    github: "https://github.com/CarlosCG2000/theSimpsonsPlaceAppAndroid",
    image: "projects/17_app_simpsons_android.png",
    link: "http://play.google.com/store/games?hl=es&pli=1", // Añadir enlace a la Google Play
    tags: [TAGS.KOTLIN, TAGS.ANDROID], // Añadir más Tags
    alt: "Captura de una de las pantalla de la aplicación de Android de los Simpsons",
  },
  {
    title: "App de Los Simpsons - iOS",
    description:
      "Desarrollada en Swift 6 con SwiftUI, basada en la arquitectura MVVM siguiendo los principios de Clean Architecture. Se realizan llamadas tanto a mocks de datos JSON como a APIs utilizando URLSession. Se implementa persistencia de datos local con SwiftData y UserDefaults y uso de protocolos e inyección de dependencias. Se incorporan dependencias para animaciones (Lottie) y pruebas Snapshot a través de Swift Package Manager. Se ofrece soporte multilingüe mediante el archivo “Localizable”, con versiones en inglés (predeterminado), español y francés, cuenta con una estrategia de testing completa, con tests unitarios, de integración, Snapshot y End-to-End (UITests).",
    github: "https://github.com/CarlosCG2000/theSimpsonsPlaceApp",
    image: "projects/16_app_simpsons_ios.png",
    link: "https://apps.apple.com/es/developer/apple", // Añadir enlace a la App Store
    tags: [TAGS.SWIFT, TAGS.iOS], // Añadir más Tags
    alt: "Captura de una de las pantalla de la aplicación de iOS de los Simpsons",
  },
  {
    title: "App Bloqueador de Llamadas",
    description:
      "Desarrollada en Swift 6 con SwiftUI, utilizando SwiftData como sistema de almacenamiento. Integra una extensión de llamadas para bloquear números de teléfono registrados por el usuario. Permite añadir, editar y eliminar contactos bloqueados desde la propia app. Incluye soporte multilingüe en inglés (predeterminado) y español.",
    github: "https://github.com/CarlosCG2000/Bloqueador-Llamadas",
    image: "projects/18_AppIos_BloqueadorLlamadas.webp",
    link: "", // Añadir enlace a la App Store
    tags: [TAGS.SWIFT, TAGS.iOS], // Añadir más Tags
    alt: "Captura de una de las pantalla de la aplicación de Ios de para bloquear llamadas",
  },
  {
    title: "COILApp - Web",
    description:
      "Trabajo final de grado. Aplicación Web para la gestión de datos de proyectos de COIL (proyectos entre varias entidades de diferentes paises) con la capacidad de gestionar todo tipo de usuarios, proyectos, etc.",
    link: "",
    github: "https://github.com/CarlosCG2000/gestion-coils-front",
    image: "projects/tfg-coil.webp",
    tags: [TAGS.TS, TAGS.ANGULAR, TAGS.NODE, TAGS.MONGODB, TAGS.FIREBASE],
    alt: "Captura de una de las pantallas de la aplicación de proyectos COIL",
  },
  {
    title: "Librería de enrutamiento en React",
    description:
      "Publicación de una libreria en NPM. Un proyecto desarrollado desde 0, donde creo un enrutamiento de navegación estilo React Router.",
    link: "https://www.npmjs.com/package/07-navegation-router?activeTab=code",
    github: "https://github.com/CarlosCG2000/React-Router",
    image: "/projects/7-rutas.webp",
    tags: [TAGS.JS, TAGS.REACT, TAGS.VITE, TAGS.NPM],
    alt: "Captura de la pagina de NPM donde tengo publicada la libreria",
  },
  {
    title: "3 en 1 App en Swift UI",
    description:
      "Menú de tres aplicaciones en una sola aplicación. 1º: sirve para calcular el IMC del usuario. 2º: permite visualizar un listado de superhéroes a través de una API externa (https://superheroapi.com/) ver sus detalles. 3º: a través del mapa de Apple mostrará tus lugares favoritos, los cuales los puedes guardar con UserDefaults y visualizar y redirigirse a su ubicación a través de un desplegable.",
    github: "https://github.com/CarlosCG2000/Curso_iOS",
    image: "projects/15_app-x3-ios.webp",
    tags: [TAGS.SWIFT, TAGS.iOS],
    alt: "Captura de una de las pantalla de la aplicación de iOS con 3 aplicaciones en 1",
  },
  {
    title: "Aplicación para gestionar recetas a través de una API",
    description:
      "Es una aplicación web donde vas a poder visualizar recetas de comida de la Api de themealdb.com, además de poder buscar recetas por nombre, categoría, ect. Aparte podrás añadir a favoritos tus recetas preferidas, añadir tips a dichas recetas, crear tus propias recetas, modificarlas, etc.",
    link: "https://recetas-mimo.netlify.app/#/listado-recetas",
    github: "https://github.com/CarlosCG2000/recetas-mimo",
    image: "projects/14-receta.webp",
    tags: [TAGS.TS, TAGS.ANGULAR, TAGS.IONIC, TAGS.LOCAL_STORAGE],
    alt: "Captura de una de las pantallas del proyecto de recetas",
  },
  {
    title: "Sistema de registro de producción Complex",
    description: "Proyecto de Complex en Rumania para Huercasa (agricola).",
    link: "",
    github: "https://github.com/CarlosCG2000/huercasa-complex",
    image: "projects/powerapp.webp",
    tags: [TAGS.MICRO_PLATFORM],
    alt: "Captura de una de unas de las pantallas de la interfaz del proyecto",
  },
  {
    title: "Clon de Google Translate con ChatGPT",
    description:
      "Divido en el front y el back (que es donde tengo la API-key de OpenAI). Uso ChatGPT para crear un traductor de texto con un estilo parecido a Google Translate.",
    link: "",
    github: "https://github.com/CarlosCG2000/Mi-Clon-Google-Translate",
    image: "projects/09-google-traductor.webp",
    tags: [TAGS.TS, TAGS.REACT, TAGS.VITE],
    alt: "Captura de mi propio Google Translate con ChatGPT",
  },
  // {
  //   title: "Prueba Técnica Junior",
  //   description:
  //     "Crea una aplicación para buscar películas, evitando que se haga una misma búqueda dos veces y que la búsqueda se haga automáticamente al escribir pero con debounce.",
  //   link: "",
  //   github: "https://github.com/CarlosCG2000/prueba-tecnica-junior",
  //   image: "projects/5-prueba-junior.webp",
  //   tags: [TAGS.JS, TAGS.REACT, TAGS.VITE],
  //   alt: "Captura de la prueba técnica para el puesto de Junior",
  // },
  // {
  //   title: "TodoMVC App",
  //   description:
  //     "Listar, añadir, borrar, completar y filtrar los TODOs, añadir estilos del TodoMVC, animaciones con AutoAnimate, etc.",
  //   link: "https://todos-lista.netlify.app",
  //   github: "https://github.com/CarlosCG2000/TodoMVC-App",
  //   image: "projects/8-todo-app.webp",
  //   tags: [TAGS.TS, TAGS.REACT, TAGS.VITE],
  //   alt: "Captura de TodoMVC App",
  // },
  // {
  //   title: "CRUD con Redux Toolkit",
  //   description:
  //     "El estilo de aplicación más típico solucionado usando un estado global con Redux Toolkit",
  //   link: "",
  //   github: "https://github.com/CarlosCG2000/App-CRUD-Redux",
  //   image: "projects/10-crud-redux.webp",
  //   tags: [TAGS.TS, TAGS.REACT, TAGS.VITE],
  //   alt: "Captura de una la pantalla de CRUD con Redux Toolkit y TypeScript",
  // },
  {
    title: "Prueba Técnica Trainee",
    description:
      "Muestra una lista de productos que vienen de un JSON, con filtros y useContext para evitar pasar props innecesarias. En el carrito se pueden añadir, eliminar, actualizar la cantidad de productos y todo esto se guarda en el Local Storage.",
    link: "https://prueba-tecnica-trainee-2.netlify.app",
    github: "https://github.com/CarlosCG2000/Prueba-tecnica-trainee-2",
    image: "projects/6-prueba-junior-compra.webp",
    tags: [TAGS.JS, TAGS.REACT, TAGS.VITE, TAGS.LOCAL_STORAGE],
    alt: "Captura de la prueba técnica para el puesto de Trainee",
  },
  {
    title: "Prueba Técnica Trainee-Junior",
    description:
      "Recuperar un hecho aleatorio de gatos y muestra una imagen de un gato con la primera palabra del hecho.",
    link: "https://trainee-prueba-tecnica.netlify.app/",
    github: "https://github.com/CarlosCG2000/prueba-tecnica-trainee",
    image: "projects/4-prueba-trainee.webp",
    tags: [TAGS.JS, TAGS.REACT, TAGS.VITE],
    alt: "Captura de la prueba técnica para el puesto de Trainee-Junior",
  },
  // {
  //   title: "Juego Tres en Raya",
  //   description:
  //     "Juego para dos personas del clásico tres en raya con almacenamiento en el Local Storage para guardar la partida actual.",
  //   link: "https://juego-3-en-raya.netlify.app/",
  //   github: "https://github.com/CarlosCG2000/juego-tres-en-raya",
  //   image: "projects/2-tres-en-raya.webp",
  //   tags: [TAGS.JS, TAGS.REACT, TAGS.VITE],
  //   alt: "Captura de la interfaz del proyecto de tarjetas de seguidores estilo X (Twitter)",
  // },
  // {
  //   title: "Etiquetas de seguidores estilo X (Twitter)",
  //   description:
  //     "Trata de crear tarjetas de usuario de X (Twitter) con la capacidad de seguir a otros usuarios de forma estática.",
  //   link: "https://tarjetas-x-twitter.netlify.app",
  //   github: "https://github.com/CarlosCG2000/tarjeta-usuarios-x-twitter",
  //   image: "projects/1-tarjeta-x.webp",
  //   tags: [TAGS.JS, TAGS.REACT, TAGS.VITE],
  //   alt: "Captura de la interfaz del proyecto de tarjetas de seguidores estilo X (Twitter)",
  // },
  // {
  //   title: "Puntero de ratón seguidor",
  //   description:
  //     "Creación de una app para seguir el puntero. Es un proyecto en el que pueda seguir el puntero (con el efecto de una bolita) con una animación y además poder activar y desactivar, etcétera.  ",
  //   link: "https://puntero-marcador.netlify.app",
  //   github: "https://github.com/CarlosCG2000/puntero-marcador",
  //   image: "/projects/3-puntero.webp",
  //   tags: [TAGS.JS, TAGS.REACT, TAGS.VITE],
  //   alt: "Captura de la interfaz del puntero de ratón seguidor",
  // },
];

// Extraer todos los tags únicos de los proyectos
const allTags = Array.from(
  new Set(PROJECTS.flatMap((project) => project.tags.map((tag) => tag.name)))
).sort();
---

<!-- Filtros de tecnologías -->
<div class="mb-6" id="filter-section">
  <div class="flex items-center gap-3 mb-4">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="w-5 h-5 text-blue-600 dark:text-blue-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
      ></path>
    </svg>
    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">
      Filtrar por tecnología
    </h3>
    <span
      id="filter-count"
      class="ml-auto text-sm text-gray-600 dark:text-gray-400"
    >
      Mostrando <strong id="visible-count">{PROJECTS.length}</strong> de <strong
        >{PROJECTS.length}</strong
      > proyectos
    </span>
  </div>

  <div class="flex flex-wrap gap-2 mb-4">
    <button
      class="filter-btn active px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-md hover:shadow-lg hover:scale-105"
      data-filter="all"
    >
      Todos
    </button>
    {
      allTags.map((tagName) => {
        const tagData = Object.values(TAGS).find((t) => t.name === tagName);
        return (
          <button
            class={`filter-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:border-blue-500 dark:hover:border-blue-400 hover:text-blue-600 dark:hover:text-blue-400 hover:scale-105`}
            data-filter={tagName}
          >
            {tagData && <tagData.icon class="inline-block w-4 h-4 mr-1" />}
            {tagName}
          </button>
        );
      })
    }
  </div>
</div>

<!-- Indicador de scroll -->
<div
  class="mb-8 flex items-center gap-3 text-gray-600 dark:text-gray-400"
  role="status"
  aria-label="Instrucciones de navegación"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="w-5 h-5 animate-bounce-horizontal"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
  </svg>
  <span class="text-sm font-medium"
    >Desliza horizontalmente para ver más proyectos</span
  >
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="w-5 h-5 animate-bounce-horizontal"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    aria-hidden="true"
  >
    viewBox="0 0 24 24" stroke="currentColor" >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
  </svg>
</div>

<!-- Contenedor con scroll horizontal -->
<div
  class="horizontal-scroll-wrapper"
  role="region"
  aria-label="Galería de proyectos"
  tabindex="0"
>
  <div class="horizontal-scroll-container" role="list">
    {
      PROJECTS.map(
        ({ image, title, description, tags, alt, link, github }, index) => (
          <article
            class="project-card-horizontal group"
            role="listitem"
            data-tags={tags.map((tag) => tag.name).join(",")}
          >
            <div class="project-image-container">
              <div class="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-600/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-2xl" />
              <img alt={alt} class="project-image" loading="lazy" src={image} />
            </div>

            <div class="project-content">
              <h3 class="project-title">{title}</h3>

              <div
                class="flex flex-wrap gap-2 mb-4"
                role="list"
                aria-label="Tecnologías utilizadas"
              >
                {tags.map((tag) => (
                  <span
                    class={`flex gap-x-2 rounded-full text-xs font-medium ${tag.class} py-1.5 px-3 shadow-sm hover:shadow-md transition-shadow duration-300`}
                    role="listitem"
                  >
                    <tag.icon class="size-4" aria-hidden="true" />
                    {tag.name}
                  </span>
                ))}
              </div>

              <p class="project-description">{description}</p>

              <footer class="flex items-center gap-x-3 mt-auto">
                {github && (
                  <LinkButton href={github}>
                    <GitHubIcon class="size-5" />
                    Código
                  </LinkButton>
                )}
                {link && (
                  <LinkButton href={link}>
                    <Link class="size-4" />
                    Vista Previa
                  </LinkButton>
                )}
              </footer>
            </div>
          </article>
        )
      )
    }
  </div>
</div>

<!-- Barra de progreso de scroll -->
<div class="scroll-progress-container">
  <div id="scroll-progress-bar" class="scroll-progress-bar"></div>
</div>

<style>
  @keyframes bounce-horizontal {
    0%,
    100% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(10px);
    }
  }

  .animate-bounce-horizontal {
    animation: bounce-horizontal 2s ease-in-out infinite;
  }

  .horizontal-scroll-wrapper {
    position: relative;
    width: 100%;
    max-width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
    scrollbar-color: rgb(59 130 246 / 0.5) rgb(243 244 246 / 0.5);
    padding-bottom: 2rem;
  }

  .horizontal-scroll-wrapper::-webkit-scrollbar {
    height: 8px;
  }

  .horizontal-scroll-wrapper::-webkit-scrollbar-track {
    background: rgb(243 244 246 / 0.5);
    border-radius: 10px;
  }

  .horizontal-scroll-wrapper::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, rgb(59 130 246), rgb(147 51 234));
    border-radius: 10px;
  }

  .horizontal-scroll-wrapper::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(90deg, rgb(37 99 235), rgb(126 34 206));
  }

  .horizontal-scroll-container {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    padding: 1rem 0.5rem;
    min-width: min-content;
  }

  .project-card-horizontal {
    flex: 0 0 auto;
    width: 380px;
    max-width: 90vw;
    display: flex;
    flex-direction: column;
    background: white;
    border-radius: 1.5rem;
    overflow: hidden;
    scroll-snap-align: start;
    transition: all 0.3s ease;
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
    border: 2px solid rgb(229 231 235);
    min-width: 200px;
    max-width: 350px;
  }

  :global(.dark) .project-card-horizontal {
    background: rgb(31 41 55);
    border-color: rgb(55 65 81);
  }

  .project-card-horizontal:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow:
      0 20px 25px -5px rgb(59 130 246 / 0.2),
      0 8px 10px -6px rgb(59 130 246 / 0.2);
    border-color: rgb(59 130 246);
  }

  :global(.dark) .project-card-horizontal:hover {
    border-color: rgb(96 165 250);
  }

  .project-image-container {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
    background: rgb(243 244 246);
  }

  :global(.dark) .project-image-container {
    background: rgb(17 24 39);
  }

  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top;
    transition: transform 0.5s ease;
  }

  .project-card-horizontal:hover .project-image {
    transform: scale(1.1);
  }

  .project-content {
    padding: 0.75rem 1rem;
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .project-title {
    font-size: 1.25rem;
    font-weight: bold;
    color: rgb(17 24 39);
    margin-bottom: 0.5rem;
    transition: color 0.3s ease;
  }

  :global(.dark) .project-title {
    color: white;
  }

  .project-card-horizontal:hover .project-title {
    color: rgb(59 130 246);
  }

  :global(.dark) .project-card-horizontal:hover .project-title {
    color: rgb(96 165 250);
  }

  .project-description {
    color: rgb(75 85 99);
    line-height: 1.5;
    margin-bottom: 0.75rem;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  :global(.dark) .project-description {
    color: rgb(209 213 219);
  }

  .scroll-progress-container {
    width: 100%;
    height: 4px;
    background: rgb(229 231 235);
    border-radius: 2px;
    overflow: hidden;
    margin-top: 1rem;
  }

  :global(.dark) .scroll-progress-container {
    background: rgb(55 65 81);
  }

  .scroll-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, rgb(59 130 246), rgb(147 51 234));
    width: 0%;
    transition: width 0.1s ease;
    border-radius: 2px;
  }

  @media (max-width: 768px) {
    .project-card-horizontal {
      width: 350px;
    }

    .project-image-container {
      height: 200px;
    }

    .project-content {
      padding: 1rem;
    }

    .project-title {
      font-size: 1.25rem;
    }
  }

  /* Estilos para botones de filtro */
  .filter-btn {
    cursor: pointer;
    user-select: none;
  }

  .filter-btn.active {
    background: linear-gradient(90deg, rgb(59 130 246), rgb(147 51 234));
    color: white;
    border-color: transparent;
    box-shadow: 0 4px 6px -1px rgb(59 130 246 / 0.3);
  }

  .filter-btn:not(.active) {
    background: white;
  }

  :global(.dark) .filter-btn:not(.active) {
    background: rgb(31 41 55);
  }

  /* Animación de fade para proyectos filtrados */
  .project-card-horizontal {
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }

  .project-card-horizontal.hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const scrollContainer = document.querySelector(
      ".horizontal-scroll-wrapper"
    ) as HTMLElement;
    const progressBar = document.getElementById("scroll-progress-bar");

    if (scrollContainer && progressBar) {
      // Barra de progreso
      scrollContainer.addEventListener("scroll", () => {
        const scrollWidth =
          scrollContainer.scrollWidth - scrollContainer.clientWidth;
        const scrolled = scrollContainer.scrollLeft;
        const progress = (scrolled / scrollWidth) * 100;
        progressBar.style.width = `${progress}%`;
      });

      // Navegación con teclado (flechas izquierda/derecha)
      scrollContainer.addEventListener("keydown", (e: KeyboardEvent) => {
        const scrollAmount = 450; // Ancho de una tarjeta

        if (e.key === "ArrowRight") {
          e.preventDefault();
          scrollContainer.scrollBy({ left: scrollAmount, behavior: "smooth" });
        } else if (e.key === "ArrowLeft") {
          e.preventDefault();
          scrollContainer.scrollBy({ left: -scrollAmount, behavior: "smooth" });
        } else if (e.key === "Home") {
          e.preventDefault();
          scrollContainer.scrollTo({ left: 0, behavior: "smooth" });
        } else if (e.key === "End") {
          e.preventDefault();
          scrollContainer.scrollTo({
            left: scrollContainer.scrollWidth,
            behavior: "smooth",
          });
        }
      });
    }

    // Sistema de filtrado de proyectos
    const filterButtons = document.querySelectorAll(".filter-btn");
    const projectCards = document.querySelectorAll(".project-card-horizontal");
    const visibleCountEl = document.getElementById("visible-count");
    const activeFilters = new Set<string>();

    function updateProjects() {
      let visibleCount = 0;

      projectCards.forEach((card) => {
        const cardTags = (card.getAttribute("data-tags") || "").split(",");

        // Si no hay filtros activos o "Todos" está activo, mostrar todo
        if (activeFilters.size === 0 || activeFilters.has("all")) {
          card.classList.remove("hidden");
          visibleCount++;
        } else {
          // Verificar si el proyecto tiene al menos uno de los tags seleccionados
          const hasMatchingTag = cardTags.some((tag) => activeFilters.has(tag));

          if (hasMatchingTag) {
            card.classList.remove("hidden");
            visibleCount++;
          } else {
            card.classList.add("hidden");
          }
        }
      });

      // Actualizar contador
      if (visibleCountEl) {
        visibleCountEl.textContent = visibleCount.toString();
      }

      // Resetear scroll al inicio
      if (scrollContainer) {
        scrollContainer.scrollTo({ left: 0, behavior: "smooth" });
      }
    }

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const filter = button.getAttribute("data-filter");

        if (!filter) return;

        // Si se hace clic en "Todos"
        if (filter === "all") {
          activeFilters.clear();
          activeFilters.add("all");

          // Desactivar todos los botones excepto "Todos"
          filterButtons.forEach((btn) => btn.classList.remove("active"));
          button.classList.add("active");
        } else {
          // Remover "Todos" si está activo
          activeFilters.delete("all");
          const todosBtn = document.querySelector('[data-filter="all"]');
          if (todosBtn) todosBtn.classList.remove("active");

          // Toggle del filtro seleccionado
          if (activeFilters.has(filter)) {
            activeFilters.delete(filter);
            button.classList.remove("active");

            // Si no hay filtros activos, activar "Todos"
            if (activeFilters.size === 0) {
              activeFilters.add("all");
              if (todosBtn) todosBtn.classList.add("active");
            }
          } else {
            activeFilters.add(filter);
            button.classList.add("active");
          }
        }

        updateProjects();
      });
    });

    // Inicializar con todos los proyectos visibles
    activeFilters.add("all");
    updateProjects();
  });
</script>
